[{"C:\\Users\\DELL\\Desktop\\Notes App\\note-app\\src\\index.js":"1","C:\\Users\\DELL\\Desktop\\Notes App\\note-app\\src\\App.js":"2"},{"size":220,"mtime":1610204802297,"results":"3","hashOfConfig":"4"},{"size":4839,"mtime":1611409858138,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"vr93bx",{"filePath":"8","messages":"9","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"C:\\Users\\DELL\\Desktop\\Notes App\\note-app\\src\\index.js",[],"C:\\Users\\DELL\\Desktop\\Notes App\\note-app\\src\\App.js",["11"],"import React, { useState } from \"react\";\nimport \"./App.css\";\n\nconst testNotes = [\n    {\n        id: 1,\n        text: \"This is a test note\",\n        backgroundColor: \"red\",\n        isCompleted: true,\n    },\n    {\n        id: 2,\n        text: \"This is my second test note\",\n        backgroundColor: \"blue\",\n        isCompleted: true,\n    },\n];\n\n\n\n\n//This is a Component in ReactJs\nconst Note = ({ text, isCompleted, id, backgroundColor, onNoteDelete }) => {\n    \n    const isDone = isCompleted ? \"Yes\" : \"No\";\n\n    return (\n        \n            <div className=\"card\">\n                <p className=\"note\" style={{ backgroundColor }}>\n                    {text} isCompleted: {isDone} id: {id}\n                </p>\n                <button type=\"submit\" onClick={()=> onNoteDelete(id)}>\n                    Delete Note\n                </button>\n            </div>\n    );\n};\n\nfunction App() {\n\n\n    //This useState is responsible for rendering testNotes\n    const [notes, setNote] = useState(testNotes);\n\n\n\n    //This useState is responsible for adding notes\n    const [text, setText] = useState(\"\");\n\n    //This useState is responsible for getting the id of the note and re-rendering the new update\n    const [textUpdate, setTextUpdate] = useState(\"\");\n\n    //This useState is responsible for user choosing background color\n    const [color, setColor] = useState(\"\");\n\n    const handleNoteDelete = (removeId) => {\n        let updatedList;\n\n        // const idRemove = parseInt(textUpdate);\n\n        const deleteNote = () => {\n            updatedList = notes.filter((note) => note.id !== removeId).map((note, index) => ({...note, id: index+1}))\n        };\n\n        deleteNote();\n        setNote(updatedList);\n    };\n\n    const handleChange = (e) => {\n        setText(e.target.value);\n    };\n\n    const handleAddnote = () => {\n        const newNote = {\n            id: notes.length+1,\n            isCompleted: true,\n            text,\n            backgroundColor: color,\n        };\n\n        setNote([...notes, newNote]);\n        setText(\"\");\n    };\n\n    const handleChangeUpdate = (e) => {\n        setTextUpdate(e.target.value);\n    };\n\n    const handleColor = (e) => {\n        setColor(e.target.value);\n        console.log(e.target.value);\n    };\n    \n    // Handles The Updating Of The Note Once An id is Submitted\n    const handleUpdateNote = () => {\n        let updatedList;\n\n        const editNote = {\n            id: parseInt(textUpdate),\n            isCompleted: true,\n            text: text,\n            backgroundColor: color,\n        };\n\n        const updateNote = (noteEdit) => {\n            updatedList = notes.map((note) => {\n                if (note.id === noteEdit.id) {\n                    return {\n                        ...note,\n                        ...noteEdit,\n                    };\n                }\n                return note;\n            });\n        };\n\n        updateNote(editNote);\n        setNote(updatedList);\n    };\n\n    \n    console.log(notes);\n    return (\n        <div className=\"App\">\n            {/* <div className=\"center\">\n                <label htmlFor=\"idNumber\">Id</label>\n                <input\n                    className=\"input\"\n                    id=\"idNumber\"\n                    type=\"number\"\n                    value={textUpdate}\n                    onChange={handleChangeUpdate}\n                />\n            </div> */}\n            <div className=\"center\">\n                <label htmlFor=\"note\">Note</label>\n                <textarea\n                    className=\"input\"\n                    id=\"textarea\"\n                    type=\"text\"\n                    value={text}\n                    onChange={handleChange}\n                ></textarea>\n            </div>\n            <div>\n                <button type=\"submit\" onClick={handleAddnote}>\n                    Add Note\n                </button>\n                {/* <button type=\"submit\" onClick={handleNoteDelete}>\n                    Delete Note\n                </button> */}\n                <button type=\"submit\" onClick={handleUpdateNote}>\n                    Edit Note\n                </button>\n            </div>\n            <div>\n                <select onChange={handleColor} value={color}>\n                    <option value=\"red\">red</option>\n                    <option value=\"green\">green</option>\n                    <option selected value=\"yellow\">\n                        yellow\n                    </option>\n                    <option value=\"blue\">blue</option>\n                    {/* {console.log(color)} */}\n                </select>\n            </div>\n            <div className=\"cardContainer\">\n                {notes.map(({ id, ...note }) => (\n                    <Note key={id} id={id} onNoteDelete={handleNoteDelete} {...note} />\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n",{"ruleId":"12","severity":1,"message":"13","line":86,"column":11,"nodeType":"14","messageId":"15","endLine":86,"endColumn":29},"no-unused-vars","'handleChangeUpdate' is assigned a value but never used.","Identifier","unusedVar"]